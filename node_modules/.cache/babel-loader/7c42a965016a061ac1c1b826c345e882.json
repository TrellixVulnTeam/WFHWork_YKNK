{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\nvar _react = require(\"react\"); // const LOWER_A_KEYCODE = 97;\n\n\nvar UPPER_A_KEYCODE = 65;\nvar LOWER_Z_KEYCODE = 122; // const UPPER_Z_KEYCODE = 90;\n\nvar ZERO_KEYCODE = 48;\nvar NINE_KEYCODE = 57;\n\nvar useOTP = function useOTP(_ref) {\n  var autoFocus = _ref.autoFocus,\n      value = _ref.value,\n      otpType = _ref.otpType,\n      onChange = _ref.onChange,\n      OTPLength = _ref.OTPLength;\n\n  var _useState = (0, _react.useState)(autoFocus ? 0 : -1),\n      _useState2 = _slicedToArray(_useState, 2),\n      activeInput = _useState2[0],\n      setActiveInput = _useState2[1];\n\n  var getOtpValue = function getOtpValue() {\n    return value ? value.toString().split(\"\") : [];\n  }; // Helper to return OTP from input\n\n\n  var handleOtpChange = function handleOtpChange(otp) {\n    var otpValue = otp.join(\"\"); // if (otpType === \"number\") {\n    //   otpValue = +otpValue;\n    // }\n\n    onChange(otpValue);\n  }; // Focus on input by index\n\n\n  var focusInput = function focusInput(input) {\n    var nextActiveInput = Math.max(Math.min(OTPLength - 1, input), 0);\n    setActiveInput(nextActiveInput);\n  };\n  /**\n   * @typedef {\"next\" | \"prev\"} FocusDirections\n   * @param {FocusDirections} direction\n   */\n\n\n  var focusInputByDirection = function focusInputByDirection() {\n    var direction = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"next\";\n    focusInput(direction === \"next\" ? activeInput + 1 : activeInput - 1);\n  }; // Change OTP value at focused input\n\n\n  var changeActiveInputValue = function changeActiveInputValue(_ref2) {\n    var _ref3 = _slicedToArray(_ref2, 1),\n        nextValue = _ref3[0];\n\n    var otp = getOtpValue();\n    otp[activeInput] = nextValue;\n    handleOtpChange(otp);\n  }; // Handle pasted OTP\n\n\n  var handleOnPaste = function handleOnPaste(e, data) {\n    e.preventDefault();\n    var otp = getOtpValue(); // Get pastedData in an array of max size (num of inputs - current position)\n\n    var clipboardData = process.env.NODE_ENV === \"test\" ? data.slice(0, OTPLength - activeInput).split(\"\") : e.clipboardData.getData(\"text/plain\").slice(0, OTPLength - activeInput).split(\"\"); // Paste data from focused input onwards\n    // eslint-disable-next-line no-plusplus\n\n    for (var pos = 0; pos < OTPLength; ++pos) {\n      if (pos >= activeInput && clipboardData.length > 0) {\n        otp[pos] = clipboardData.shift();\n      }\n    } // Pass copied value through onChange rules\n\n\n    var filteredOtpValue = [otp.length];\n    var validCharIndex = 0;\n\n    for (var charIndex = 0; charIndex < otp.length; ++charIndex) {\n      if (isValidateChar(otp[charIndex])) {\n        filteredOtpValue[validCharIndex] = otp[charIndex];\n        validCharIndex++;\n      }\n    }\n\n    handleOtpChange(filteredOtpValue);\n  };\n\n  var isValidateChar = function isValidateChar(char) {\n    switch (otpType) {\n      case \"number\":\n        return !(char.charCodeAt(0) > NINE_KEYCODE || char.charCodeAt(0) < ZERO_KEYCODE);\n\n      case \"alpha\":\n        return !(char.charCodeAt(0) > LOWER_Z_KEYCODE || char.charCodeAt(0) < UPPER_A_KEYCODE);\n\n      case \"alphanumeric\":\n        return !(char.charCodeAt(0) > LOWER_Z_KEYCODE || char.charCodeAt(0) < ZERO_KEYCODE);\n\n      default:\n        return true;\n    }\n  };\n\n  var handleOnChange = function handleOnChange(e) {\n    if (isValidateChar(e.target.value)) {\n      changeActiveInputValue(e.target.value);\n      focusInputByDirection(\"next\");\n    }\n  }; // Handle cases of backspace, delete, left arrow, right arrow\n\n\n  var handleOnKeyDown = function handleOnKeyDown(e) {\n    switch (e.key) {\n      case \"Backspace\":\n        e.preventDefault();\n        changeActiveInputValue(\"\");\n        focusInputByDirection(\"prev\");\n        break;\n\n      case \"Delete\":\n        e.preventDefault();\n        changeActiveInputValue(\"\");\n        break;\n\n      case \"ArrowLeft\":\n        e.preventDefault();\n        focusInputByDirection(\"prev\");\n        break;\n\n      case \"ArrowRight\":\n        e.preventDefault();\n        focusInputByDirection(\"next\");\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  var handelOnInput = function handelOnInput(e) {\n    if (e.target.value.length > 1) {\n      e.preventDefault();\n      focusInputByDirection(\"next\");\n    }\n  };\n\n  var onInputFocus = function onInputFocus(index, event) {\n    setActiveInput(index);\n    event.target.select();\n  };\n\n  return {\n    activeInput: activeInput,\n    getOtpValue: getOtpValue,\n    handleOnChange: handleOnChange,\n    handleOnKeyDown: handleOnKeyDown,\n    handelOnInput: handelOnInput,\n    handleOnPaste: handleOnPaste,\n    onInputFocus: onInputFocus\n  };\n};\n\nexports.default = useOTP;","map":{"version":3,"sources":["F:/New folder/TapaTradieWebsite20-01-2022/WFHWork/node_modules/otp-input-react/dist/hooks/useOTP.js"],"names":["Object","defineProperty","exports","value","_slicedToArray","sliceIterator","arr","i","_arr","_n","_d","_e","undefined","_i","Symbol","iterator","_s","next","done","push","length","err","Array","isArray","TypeError","_react","require","UPPER_A_KEYCODE","LOWER_Z_KEYCODE","ZERO_KEYCODE","NINE_KEYCODE","useOTP","_ref","autoFocus","otpType","onChange","OTPLength","_useState","useState","_useState2","activeInput","setActiveInput","getOtpValue","toString","split","handleOtpChange","otp","otpValue","join","focusInput","input","nextActiveInput","Math","max","min","focusInputByDirection","direction","arguments","changeActiveInputValue","_ref2","_ref3","nextValue","handleOnPaste","e","data","preventDefault","clipboardData","process","env","NODE_ENV","slice","getData","pos","shift","filteredOtpValue","validCharIndex","charIndex","isValidateChar","char","charCodeAt","handleOnChange","target","handleOnKeyDown","key","handelOnInput","onInputFocus","index","event","select","default"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar _react = require(\"react\");\n\n// const LOWER_A_KEYCODE = 97;\nvar UPPER_A_KEYCODE = 65;\nvar LOWER_Z_KEYCODE = 122;\n// const UPPER_Z_KEYCODE = 90;\nvar ZERO_KEYCODE = 48;\nvar NINE_KEYCODE = 57;\n\nvar useOTP = function useOTP(_ref) {\n  var autoFocus = _ref.autoFocus,\n      value = _ref.value,\n      otpType = _ref.otpType,\n      onChange = _ref.onChange,\n      OTPLength = _ref.OTPLength;\n\n  var _useState = (0, _react.useState)(autoFocus ? 0 : -1),\n      _useState2 = _slicedToArray(_useState, 2),\n      activeInput = _useState2[0],\n      setActiveInput = _useState2[1];\n\n  var getOtpValue = function getOtpValue() {\n    return value ? value.toString().split(\"\") : [];\n  };\n\n  // Helper to return OTP from input\n  var handleOtpChange = function handleOtpChange(otp) {\n    var otpValue = otp.join(\"\");\n    // if (otpType === \"number\") {\n    //   otpValue = +otpValue;\n    // }\n    onChange(otpValue);\n  };\n\n  // Focus on input by index\n  var focusInput = function focusInput(input) {\n    var nextActiveInput = Math.max(Math.min(OTPLength - 1, input), 0);\n    setActiveInput(nextActiveInput);\n  };\n\n  /**\n   * @typedef {\"next\" | \"prev\"} FocusDirections\n   * @param {FocusDirections} direction\n   */\n  var focusInputByDirection = function focusInputByDirection() {\n    var direction = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"next\";\n\n    focusInput(direction === \"next\" ? activeInput + 1 : activeInput - 1);\n  };\n\n  // Change OTP value at focused input\n  var changeActiveInputValue = function changeActiveInputValue(_ref2) {\n    var _ref3 = _slicedToArray(_ref2, 1),\n        nextValue = _ref3[0];\n\n    var otp = getOtpValue();\n    otp[activeInput] = nextValue;\n    handleOtpChange(otp);\n  };\n\n  // Handle pasted OTP\n  var handleOnPaste = function handleOnPaste(e, data) {\n    e.preventDefault();\n    var otp = getOtpValue();\n\n    // Get pastedData in an array of max size (num of inputs - current position)\n    var clipboardData = process.env.NODE_ENV === \"test\" ? data.slice(0, OTPLength - activeInput).split(\"\") : e.clipboardData.getData(\"text/plain\").slice(0, OTPLength - activeInput).split(\"\");\n\n    // Paste data from focused input onwards\n    // eslint-disable-next-line no-plusplus\n    for (var pos = 0; pos < OTPLength; ++pos) {\n      if (pos >= activeInput && clipboardData.length > 0) {\n        otp[pos] = clipboardData.shift();\n      }\n    }\n\n    // Pass copied value through onChange rules\n    var filteredOtpValue = [otp.length];\n    var validCharIndex = 0;\n    for (var charIndex = 0; charIndex < otp.length; ++charIndex) {\n      if (isValidateChar(otp[charIndex])) {\n        filteredOtpValue[validCharIndex] = otp[charIndex];\n        validCharIndex++;\n      }\n    }\n\n    handleOtpChange(filteredOtpValue);\n  };\n\n  var isValidateChar = function isValidateChar(char) {\n    switch (otpType) {\n      case \"number\":\n        return !(char.charCodeAt(0) > NINE_KEYCODE || char.charCodeAt(0) < ZERO_KEYCODE);\n      case \"alpha\":\n        return !(char.charCodeAt(0) > LOWER_Z_KEYCODE || char.charCodeAt(0) < UPPER_A_KEYCODE);\n      case \"alphanumeric\":\n        return !(char.charCodeAt(0) > LOWER_Z_KEYCODE || char.charCodeAt(0) < ZERO_KEYCODE);\n      default:\n        return true;\n    }\n  };\n\n  var handleOnChange = function handleOnChange(e) {\n    if (isValidateChar(e.target.value)) {\n      changeActiveInputValue(e.target.value);\n      focusInputByDirection(\"next\");\n    }\n  };\n\n  // Handle cases of backspace, delete, left arrow, right arrow\n  var handleOnKeyDown = function handleOnKeyDown(e) {\n    switch (e.key) {\n      case \"Backspace\":\n        e.preventDefault();\n        changeActiveInputValue(\"\");\n        focusInputByDirection(\"prev\");\n        break;\n      case \"Delete\":\n        e.preventDefault();\n        changeActiveInputValue(\"\");\n        break;\n      case \"ArrowLeft\":\n        e.preventDefault();\n        focusInputByDirection(\"prev\");\n        break;\n      case \"ArrowRight\":\n        e.preventDefault();\n        focusInputByDirection(\"next\");\n        break;\n      default:\n        break;\n    }\n  };\n\n  var handelOnInput = function handelOnInput(e) {\n    if (e.target.value.length > 1) {\n      e.preventDefault();\n      focusInputByDirection(\"next\");\n    }\n  };\n\n  var onInputFocus = function onInputFocus(index, event) {\n    setActiveInput(index);\n    event.target.select();\n  };\n\n  return {\n    activeInput: activeInput,\n    getOtpValue: getOtpValue,\n    handleOnChange: handleOnChange,\n    handleOnKeyDown: handleOnKeyDown,\n    handelOnInput: handelOnInput,\n    handleOnPaste: handleOnPaste,\n    onInputFocus: onInputFocus\n  };\n};\n\nexports.default = useOTP;"]},"metadata":{},"sourceType":"script"}