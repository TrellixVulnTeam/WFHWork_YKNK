{"ast":null,"code":"import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { persistStore, persistReducer } from 'redux-persist';\nimport createSagaMiddleware from 'redux-saga';\nimport rootReducer from './rootReducers';\nimport rootSaga from './rootSaga';\nimport storage from 'redux-persist/lib/storage';\nconst IS_PRODUCTION = process.env.NODE_ENV === 'production';\n\nconst bindMiddleware = middleware => {\n  if (!IS_PRODUCTION) {\n    return composeWithDevTools(applyMiddleware(...middleware));\n  }\n\n  return applyMiddleware(...middleware);\n};\n\nconst persistConfig = {\n  key: 'auth',\n  storage: storage,\n  whitelist: ['auth'] // which reducer want to store\n\n};\nconst pReducer = persistReducer(persistConfig, rootReducer);\nconst initialState = {};\nconst sagaMiddleware = createSagaMiddleware();\nconst middleWares = [sagaMiddleware];\nconst store = createStore(pReducer, initialState, bindMiddleware([...middleWares]));\nconst persistor = persistStore(store);\nsagaMiddleware.run(rootSaga);\nexport { persistor, store };","map":{"version":3,"sources":["F:/New folder/TapaTradieWebsite20-01-2022/WFHWork/src/redux/store.js"],"names":["createStore","applyMiddleware","composeWithDevTools","persistStore","persistReducer","createSagaMiddleware","rootReducer","rootSaga","storage","IS_PRODUCTION","process","env","NODE_ENV","bindMiddleware","middleware","persistConfig","key","whitelist","pReducer","initialState","sagaMiddleware","middleWares","store","persistor","run"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,SAASC,YAAT,EAAuBC,cAAvB,QAA6C,eAA7C;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AACA,OAAOC,WAAP,MAAwB,gBAAxB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,OAAP,MAAoB,2BAApB;AAEA,MAAMC,aAAa,GAAGC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA/C;;AAEA,MAAMC,cAAc,GAAIC,UAAD,IAAgB;AACtC,MAAI,CAACL,aAAL,EAAoB;AACnB,WAAOP,mBAAmB,CAACD,eAAe,CAAC,GAAGa,UAAJ,CAAhB,CAA1B;AACA;;AAED,SAAOb,eAAe,CAAC,GAAGa,UAAJ,CAAtB;AACA,CAND;;AAQA,MAAMC,aAAa,GAAG;AACrBC,EAAAA,GAAG,EAAE,MADgB;AAErBR,EAAAA,OAAO,EAAEA,OAFY;AAGrBS,EAAAA,SAAS,EAAE,CAAC,MAAD,CAHU,CAGD;;AAHC,CAAtB;AAKA,MAAMC,QAAQ,GAAGd,cAAc,CAACW,aAAD,EAAgBT,WAAhB,CAA/B;AAEA,MAAMa,YAAY,GAAG,EAArB;AAEA,MAAMC,cAAc,GAAGf,oBAAoB,EAA3C;AACA,MAAMgB,WAAW,GAAG,CAACD,cAAD,CAApB;AAEA,MAAME,KAAK,GAAGtB,WAAW,CAACkB,QAAD,EAAWC,YAAX,EAAyBN,cAAc,CAAC,CAAC,GAAGQ,WAAJ,CAAD,CAAvC,CAAzB;AACA,MAAME,SAAS,GAAGpB,YAAY,CAACmB,KAAD,CAA9B;AACAF,cAAc,CAACI,GAAf,CAAmBjB,QAAnB;AAEA,SAASgB,SAAT,EAAoBD,KAApB","sourcesContent":["import { createStore, applyMiddleware } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport { persistStore, persistReducer } from 'redux-persist';\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport rootReducer from './rootReducers';\r\nimport rootSaga from './rootSaga';\r\nimport storage from 'redux-persist/lib/storage';\r\n\r\nconst IS_PRODUCTION = process.env.NODE_ENV === 'production';\r\n\r\nconst bindMiddleware = (middleware) => {\r\n\tif (!IS_PRODUCTION) {\r\n\t\treturn composeWithDevTools(applyMiddleware(...middleware));\r\n\t}\r\n\r\n\treturn applyMiddleware(...middleware);\r\n};\r\n\r\nconst persistConfig = {\r\n\tkey: 'auth',\r\n\tstorage: storage,\r\n\twhitelist: ['auth'] // which reducer want to store\r\n};\r\nconst pReducer = persistReducer(persistConfig, rootReducer);\r\n\r\nconst initialState = {};\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\nconst middleWares = [sagaMiddleware];\r\n\r\nconst store = createStore(pReducer, initialState, bindMiddleware([...middleWares]));\r\nconst persistor = persistStore(store);\r\nsagaMiddleware.run(rootSaga);\r\n\r\nexport { persistor, store };\r\n"]},"metadata":{},"sourceType":"module"}