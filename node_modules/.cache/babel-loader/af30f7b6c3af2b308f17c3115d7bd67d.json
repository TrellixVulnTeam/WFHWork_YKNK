{"ast":null,"code":"var _jsxFileName = \"F:\\\\New folder\\\\TapaTradieWebsite20-01-2022\\\\WFHWork\\\\src\\\\pages\\\\Directory\\\\AutoCompleteSearch.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport PlacesAutocomplete, { geocodeByAddress, getLatLng } from \"react-places-autocomplete\";\nimport { ReactComponent as LocationIcon } from \"@svgr/webpack?-svgo,+titleProp,+ref!../../assets/icons/locationSvg.svg\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { createElement as _createElement } from \"react\";\nlet addrees = \"\";\n\nconst AutoCompleteSearch = _ref => {\n  _s();\n\n  let {\n    state,\n    setStateFunction,\n    addressValue\n  } = _ref;\n  const [searchQuery, setSeacrhQuery] = useState(addressValue ? addressValue : \"\");\n\n  const handleChange = value => {\n    setSeacrhQuery(value);\n  };\n\n  const handleSelect = searchQuery => {\n    setSeacrhQuery(searchQuery);\n    geocodeByAddress(searchQuery).then(results => {\n      addrees = results[0].formatted_address;\n      return getLatLng(results[0]);\n    }).then(latLng => {\n      setStateFunction({ ...state,\n        latitude: latLng.lat,\n        longitude: latLng.lng,\n        locationAdress: addrees\n      });\n    }).catch(error => console.error(\"Error\", error));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"section-top__autoCompleteSearch\",\n    style: {\n      zIndex: 3\n    },\n    children: /*#__PURE__*/_jsxDEV(PlacesAutocomplete, {\n      value: searchQuery,\n      onChange: handleChange,\n      onSelect: handleSelect,\n      children: _ref2 => {\n        let {\n          getInputProps,\n          suggestions,\n          getSuggestionItemProps,\n          loading\n        } = _ref2;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [addressValue ? /*#__PURE__*/_jsxDEV(\"input\", { ...getInputProps({\n              placeholder: \"Address\",\n              className: \"location-search-input\"\n            }),\n            className: \"section-top__autocomplete-search-input\" // defaultValue={addressValue ? addressValue : null}\n\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(\"input\", { ...getInputProps({\n              placeholder: \"Address\",\n              className: \"location-search-input\"\n            }),\n            className: \"section-top__autocomplete-search-input\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"autocomplete-dropdown-container\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"section-top__autocomplete-search-dropDown\",\n              children: suggestions.map((suggestion, idx) => {\n                const className = suggestion.active ? \"suggestion-item--active\" : \"suggestion-item\"; // inline style for demonstration purpose\n\n                const style = suggestion.active ? {\n                  backgroundColor: \"#ffffff\",\n                  cursor: \"pointer\"\n                } : {\n                  backgroundColor: \"#ffffff\",\n                  cursor: \"pointer\"\n                };\n                return /*#__PURE__*/_createElement(\"div\", { ...getSuggestionItemProps(suggestion, {\n                    className,\n                    style\n                  }),\n                  key: idx,\n                  __self: this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 90,\n                    columnNumber: 21\n                  }\n                }, /*#__PURE__*/_jsxDEV(\"div\", {\n                  style: {\n                    display: \"flex\",\n                    alignItems: \"center\"\n                  },\n                  className: \"section-top__svg-and-location\",\n                  ...getSuggestionItemProps(suggestion, {\n                    className // style,\n\n                  }),\n                  children: [/*#__PURE__*/_jsxDEV(LocationIcon, {\n                    height: \"7px\",\n                    width: \"7px\",\n                    fill: \"grey\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 105,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                    className: \"section-top__autocomplete-search-items\" // onClick={(evt) => handleSelectTerm(suggestion.description)}\n                    ,\n                    children: suggestion.description\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 106,\n                    columnNumber: 25\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 97,\n                  columnNumber: 23\n                }, this));\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 77,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 11\n        }, this);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AutoCompleteSearch, \"mB11VU/XsOi4pAuaMdOs1lioJG4=\");\n\n_c = AutoCompleteSearch;\nexport default AutoCompleteSearch;\n\nvar _c;\n\n$RefreshReg$(_c, \"AutoCompleteSearch\");","map":{"version":3,"sources":["F:/New folder/TapaTradieWebsite20-01-2022/WFHWork/src/pages/Directory/AutoCompleteSearch.js"],"names":["React","useState","PlacesAutocomplete","geocodeByAddress","getLatLng","addrees","AutoCompleteSearch","state","setStateFunction","addressValue","searchQuery","setSeacrhQuery","handleChange","value","handleSelect","then","results","formatted_address","latLng","latitude","lat","longitude","lng","locationAdress","catch","error","console","zIndex","getInputProps","suggestions","getSuggestionItemProps","loading","placeholder","className","map","suggestion","idx","active","style","backgroundColor","cursor","display","alignItems","description"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport PlacesAutocomplete, {\r\n  geocodeByAddress,\r\n  getLatLng,\r\n} from \"react-places-autocomplete\";\r\nimport { ReactComponent as LocationIcon } from \"../../assets/icons/locationSvg.svg\";\r\n\r\nlet addrees = \"\";\r\nconst AutoCompleteSearch = ({ state, setStateFunction, addressValue }) => {\r\n  \r\n  const [searchQuery, setSeacrhQuery] = useState(addressValue? addressValue : \"\");\r\n\r\n  const handleChange = (value) => {\r\n    setSeacrhQuery(value);\r\n  };\r\n  const handleSelect = (searchQuery) => {\r\n    setSeacrhQuery(searchQuery);\r\n\r\n    geocodeByAddress(searchQuery)\r\n      .then((results) => {\r\n        addrees = results[0].formatted_address;\r\n\r\n        return getLatLng(results[0]);\r\n      })\r\n      .then((latLng) => {\r\n        setStateFunction({\r\n          ...state,\r\n          latitude: latLng.lat,\r\n          longitude: latLng.lng,\r\n          locationAdress: addrees,\r\n        });\r\n      })\r\n      .catch((error) => console.error(\"Error\", error));\r\n  };\r\n\r\n  return (\r\n    <div className=\"section-top__autoCompleteSearch\" style={{ zIndex: 3 }}>\r\n      <PlacesAutocomplete\r\n        value={searchQuery}\r\n        onChange={handleChange}\r\n        onSelect={handleSelect}\r\n      >\r\n        {({ getInputProps, suggestions, getSuggestionItemProps, loading }) => (\r\n          <div>\r\n\r\n            {/* <input\r\n              {...getInputProps({\r\n                placeholder: \"Address\",\r\n                className: \"location-search-input\",\r\n              })}\r\n              className=\"section-top__autocomplete-search-input\"\r\n            //   value={addressValue ? addressValue : null}\r\n            /> */}\r\n\r\n            {addressValue ? (\r\n              <input\r\n                {...getInputProps({\r\n                  placeholder: \"Address\",\r\n                  className: \"location-search-input\",\r\n                })}\r\n                className=\"section-top__autocomplete-search-input\"\r\n\r\n                // defaultValue={addressValue ? addressValue : null}\r\n\r\n              />\r\n            ) : (\r\n              <input\r\n                {...getInputProps({\r\n                  placeholder: \"Address\",\r\n                  className: \"location-search-input\",\r\n                })}\r\n                className=\"section-top__autocomplete-search-input\"\r\n              />\r\n            )}\r\n\r\n            <div className=\"autocomplete-dropdown-container\">\r\n              <div className=\"section-top__autocomplete-search-dropDown\">\r\n                {suggestions.map((suggestion, idx) => {\r\n                  const className = suggestion.active\r\n                    ? \"suggestion-item--active\"\r\n                    : \"suggestion-item\";\r\n                  // inline style for demonstration purpose\r\n                  const style = suggestion.active\r\n                    ? { backgroundColor: \"#ffffff\", cursor: \"pointer\" }\r\n                    : {\r\n                        backgroundColor: \"#ffffff\",\r\n                        cursor: \"pointer\",\r\n                      };\r\n                  return (\r\n                    <div\r\n                      {...getSuggestionItemProps(suggestion, {\r\n                        className,\r\n                        style,\r\n                      })}\r\n                      key={idx}\r\n                    >\r\n                      <div\r\n                        style={{ display: \"flex\", alignItems: \"center\" }}\r\n                        className=\"section-top__svg-and-location\"\r\n                        {...getSuggestionItemProps(suggestion, {\r\n                          className,\r\n                          // style,\r\n                        })}\r\n                      >\r\n                        <LocationIcon height=\"7px\" width=\"7px\" fill=\"grey\" />\r\n                        <p\r\n                          className=\"section-top__autocomplete-search-items\"\r\n                          // onClick={(evt) => handleSelectTerm(suggestion.description)}\r\n                        >\r\n                          {suggestion.description}\r\n                        </p>\r\n                      </div>\r\n                    </div>\r\n                  );\r\n                })}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </PlacesAutocomplete>\r\n    </div>\r\n  );\r\n};\r\nexport default AutoCompleteSearch;\r\n"]},"metadata":{},"sourceType":"module"}